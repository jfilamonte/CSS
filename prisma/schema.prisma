generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String?   @unique
  passwordHash    String
  role            Role      @default(CUSTOMER)
  emailVerifiedAt DateTime?
  mfaEnabled      Boolean   @default(false)
  mfaSecret       String?
  disabledAt      DateTime?
  
  // Profile fields
  firstName       String?
  lastName        String?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  avatar          String?
  
  // Staff fields
  title           String?
  department      String?
  hireDate        DateTime?
  salary          Decimal?
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  sessions        Session[]
  oneTimeTokens   OneTimeToken[]
  auditLogs       AuditLog[]
  leadsSubmitted  Lead[]    @relation("LeadSubmittedBy")
  leadsAssigned   Lead[]    @relation("LeadAssignedTo")
  quotesCreated   Quote[]   @relation("QuoteCreatedBy")
  quotesAssigned  Quote[]   @relation("QuoteAssignedTo")
  projectsManaged Project[] @relation("ProjectManager")
  customerProjects Project[] @relation("ProjectCustomer")
  notifications   Notification[]
  
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @default(now())
  revokedAt    DateTime?

  refreshTokens RefreshToken[]

  @@map("sessions")
}

model RefreshToken {
  id            String   @id @default(cuid())
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     String
  tokenHash     String
  expiresAt     DateTime
  rotatedFrom   RefreshToken? @relation("rotations", fields: [rotatedFromId], references: [id])
  rotatedFromId String?
  rotatedTo     RefreshToken[] @relation("rotations")
  revokedAt     DateTime?

  @@map("refresh_tokens")
}

model OneTimeToken {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  purpose    TokenPurpose
  tokenHash  String
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  @@map("one_time_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  action    String
  ip        String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Lead {
  id             String    @id @default(cuid())
  fullName       String
  email          String
  phone          String?
  projectType    String
  squareFootage  String?
  timeline       String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  details        String?
  wantsAppointment Boolean @default(false)
  status         LeadStatus @default(NEW)
  priority       Priority  @default(MEDIUM)
  source         String?   // Where lead came from
  
  submittedBy    User?     @relation("LeadSubmittedBy", fields: [submittedById], references: [id], onDelete: SetNull)
  submittedById  String?
  assignedTo     User?     @relation("LeadAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId   String?
  
  // Follow-up tracking
  lastContactedAt DateTime?
  nextFollowUpAt  DateTime?
  notes          String?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  quotes         Quote[]
  activities     LeadActivity[]

  @@map("leads")
}

model Quote {
  id             String    @id @default(cuid())
  quoteNumber    String    @unique
  lead           Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId         String
  
  // Quote details
  title          String
  description    String?
  squareFootage  Int?
  laborCost      Decimal
  materialCost   Decimal
  totalCost      Decimal
  validUntil     DateTime
  
  status         QuoteStatus @default(DRAFT)
  createdBy      User      @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  createdById    String
  assignedTo     User?     @relation("QuoteAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId   String?
  
  // Client interaction
  sentAt         DateTime?
  viewedAt       DateTime?
  acceptedAt     DateTime?
  rejectedAt     DateTime?
  rejectionReason String?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  quoteItems     QuoteItem[]
  project        Project?

  @@map("quotes")
}

model QuoteItem {
  id          String  @id @default(cuid())
  quote       Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
  
  name        String
  description String?
  quantity    Int
  unitPrice   Decimal
  totalPrice  Decimal
  
  createdAt   DateTime @default(now())

  @@map("quote_items")
}

model Project {
  id             String    @id @default(cuid())
  projectNumber  String    @unique
  quote          Quote     @relation(fields: [quoteId], references: [id])
  quoteId        String    @unique
  
  title          String
  description    String?
  status         ProjectStatus @default(PLANNING)
  priority       Priority  @default(MEDIUM)
  
  customer       User      @relation("ProjectCustomer", fields: [customerId], references: [id])
  customerId     String
  manager        User?     @relation("ProjectManager", fields: [managerId], references: [id], onDelete: SetNull)
  managerId      String?
  
  // Project timeline
  startDate      DateTime?
  endDate        DateTime?
  completedAt    DateTime?
  
  // Project details
  address        String
  city           String
  state          String
  zipCode        String
  squareFootage  Int?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  tasks          ProjectTask[]
  files          ProjectFile[]
  payments       Payment[]
  notifications  Notification[]

  @@map("projects")
}

model ProjectTask {
  id          String    @id @default(cuid())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority  @default(MEDIUM)
  
  dueDate     DateTime?
  completedAt DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("project_tasks")
}

model ProjectFile {
  id          String    @id @default(cuid())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  category    FileCategory @default(OTHER)
  
  uploadedAt  DateTime  @default(now())

  @@map("project_files")
}

model Payment {
  id          String    @id @default(cuid())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  amount      Decimal
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod @default(CHECK)
  
  dueDate     DateTime?
  paidAt      DateTime?
  
  stripePaymentId String?
  notes       String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("payments")
}

model LeadActivity {
  id          String    @id @default(cuid())
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId      String
  
  type        ActivityType
  title       String
  description String?
  
  createdAt   DateTime  @default(now())

  @@map("lead_activities")
}

model SiteSettings {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  category    String    @default("general")
  description String?
  
  updatedAt   DateTime  @updatedAt

  @@map("site_settings")
}

model Service {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  description String
  content     String
  
  // SEO fields
  metaTitle   String?
  metaDescription String?
  keywords    String?
  
  // Display options
  featured    Boolean   @default(false)
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Media
  heroImage   String?
  gallery     String[]  @default([])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("services")
}

model BlogPost {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String?
  content     String
  
  // SEO fields
  metaTitle   String?
  metaDescription String?
  keywords    String?
  
  // Publishing
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  
  // Media
  featuredImage String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}

model PortfolioItem {
  id          String    @id @default(cuid())
  title       String
  description String?
  category    String
  
  // Project details
  location    String?
  squareFootage Int?
  completedAt DateTime?
  
  // Media
  images      String[]  @default([])
  beforeImages String[] @default([])
  afterImages String[]  @default([])
  
  // Display options
  featured    Boolean   @default(false)
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("portfolio_items")
}

model Notification {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  type        String    // "lead", "quote", "project", "payment", "system"
  title       String
  message     String
  actionUrl   String?
  
  isRead      Boolean   @default(false)
  readAt      DateTime?
  
  createdAt   DateTime  @default(now())

  @@map("notifications")
}

model SeoSettings {
  id            String    @id @default(cuid())
  page          String    @unique
  title         String
  description   String
  keywords      String?
  ogImage       String?
  canonicalUrl  String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("seo_settings")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum LeadStatus {
  NEW
  CONTACTED
  ESTIMATE_SENT
  SCHEDULED
  CLOSED_WON
  CLOSED_LOST
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  STRIPE
}

enum FileCategory {
  CONTRACT
  INVOICE
  PHOTO
  DOCUMENT
  OTHER
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  QUOTE_SENT
  FOLLOW_UP
}

enum TokenPurpose {
  VERIFY_EMAIL
  RESET_PASSWORD
}
